{"version":3,"sources":["webpack:///./src/views/RestaurantDashboard.vue","webpack:///./src/views/RestaurantDashboard.vue?90e2"],"names":["class","isLoading","restaurant","name","categoryName","commentsLength","viewCounts","saveCounts","type","$router","back","data","components","Spinner","methods","fetchDashBoard","restaurantId","restaurants","getDashboard","console","log","status","fire","icon","title","message","Error","Comments","Category","length","FavoritedUsers","created","id","this","$route","params","beforeRouteUpdate","to","from","next","render"],"mappings":"sJACOA,MAAM,kB,GAMCA,MAAM,gC,EAKd,eAAM,mB,gFAXV,eAuBM,MAvBN,EAuBM,CArBW,EAAAC,W,iBAAf,eAA4B,a,iBAC5B,eAmBW,gBAlBT,eAKM,YAJJ,eAA8B,yBAAvB,EAAAC,WAAWC,MAAI,GACtB,eAEO,OAFP,EAEO,eADF,EAAAD,WAAWE,cAAY,KAI9B,EAEA,eAIK,WAHH,eAA4D,UAAxD,uBAAoB,eAAG,EAAAF,WAAWG,gBAAc,GACpD,eAAqD,UAAjD,oBAAiB,eAAG,EAAAH,WAAWI,YAAU,GAC7C,eAAqD,UAAjD,oBAAiB,eAAG,EAAAJ,WAAWK,YAAU,KAG/C,eAES,UAFDC,KAAK,SAASR,MAAM,eAAgB,QAAK,+BAAE,EAAAS,QAAQC,UAAQ,W,uEAY1D,GACbC,KADa,WAEX,MAAO,CACLT,WAAY,GACZD,WAAW,IAGfW,WAAY,CACVC,UAAA,MAEFC,QAAS,CACDC,eADC,SACcC,GAAc,oLAE/B,EAAKf,WAAY,EAFc,SAGRgB,EAAA,KAAeC,aAAa,CAAEF,iBAHtB,mBAGvBL,EAHuB,EAGvBA,KACRQ,QAAQC,IAAI,OAAQT,GAEA,YAAhBA,EAAKU,OANsB,oBAOT,UAAhBV,EAAKU,OAPoB,0CAQpB,OAAMC,KAAK,CAChBC,KAAM,QACNC,MAAOb,EAAKc,WAVa,cAavB,IAAIC,MAAMf,EAAKc,SAbQ,eAgBvBvB,EAAyBS,EAAzBT,WAAYyB,EAAahB,EAAbgB,SACpB,EAAKzB,WAAa,CAChBC,KAAMD,EAAWC,KACjBC,aAAcF,EAAW0B,SAASzB,KAClCE,eAAgBsB,EAAWA,EAASE,OAAS,EAC7CvB,WAAYJ,EAAWI,WACvBC,WAAYL,EAAW4B,eAAeD,QAGxC,EAAK5B,WAAY,EAzBc,kBA0BxB,MA1BwB,4CA4B/B,EAAKA,WAAY,EACjBkB,QAAQC,IAAR,MA7B+B,kBA8BxB,OAAME,KAAK,CAChBC,KAAM,QACNC,MAAO,8EAhCsB,8DAqCrCO,QAhDa,WAiDX,IAAQC,EAAOC,KAAKC,OAAOC,OAAnBH,GACRC,KAAKlB,eAAeiB,IAEtBI,kBApDa,SAoDKC,EAAIC,EAAMC,GAC1B,IAAQP,EAAOC,KAAKC,OAAOC,OAAnBH,GACRC,KAAKlB,eAAeiB,GACpBO,MCpFJ,EAAOC,OAASA,EAED","file":"js/chunk-2d0b2ec8.7252c346.js","sourcesContent":["<template>\n  <div class=\"container py-5\">\n    <!-- Spinner -->\n    <spinner v-if=\"isLoading\" />\n    <template v-else>\n      <div>\n        <h1>{{ restaurant.name }}</h1>\n        <span class=\"badge bg-secondary mt-1 mb-3\">\n          {{ restaurant.categoryName }}\n        </span>\n      </div>\n\n      <hr />\n\n      <ul>\n        <li>Number of comments: {{ restaurant.commentsLength }}</li>\n        <li>Number of views: {{ restaurant.viewCounts }}</li>\n        <li>Number of saves: {{ restaurant.saveCounts }}</li>\n      </ul>\n\n      <button type=\"button\" class=\"btn btn-link\" @click=\"$router.back()\">\n        回上一頁\n      </button>\n    </template>\n  </div>\n</template>\n\n<script>\nimport Spinner from '../components/Spinner.vue';\nimport restaurantsAPI from '../apis/restaurants';\nimport { Toast } from '../utils/helpers';\n\nexport default {\n  data() {\n    return {\n      restaurant: {},\n      isLoading: true\n    };\n  },\n  components: {\n    Spinner\n  },\n  methods: {\n    async fetchDashBoard(restaurantId) {\n      try {\n        this.isLoading = true;\n        const { data } = await restaurantsAPI.getDashboard({ restaurantId });\n        console.log('data', data);\n\n        if (data.status !== 'success') {\n          if (data.status === 'error') {\n            return Toast.fire({\n              icon: 'error',\n              title: data.message\n            });\n          }\n          throw new Error(data.message);\n        }\n\n        const { restaurant, Comments } = data;\n        this.restaurant = {\n          name: restaurant.name,\n          categoryName: restaurant.Category.name,\n          commentsLength: Comments ? Comments.length : 0,\n          viewCounts: restaurant.viewCounts,\n          saveCounts: restaurant.FavoritedUsers.length\n        };\n\n        this.isLoading = false;\n        return null;\n      } catch (err) {\n        this.isLoading = false;\n        console.log(err);\n        return Toast.fire({\n          icon: 'error',\n          title: 'Sorry, we can not get restaurant data rignt now, please try again later.'\n        });\n      }\n    }\n  },\n  created() {\n    const { id } = this.$route.params;\n    this.fetchDashBoard(id);\n  },\n  beforeRouteUpdate(to, from, next) {\n    const { id } = this.$route.params;\n    this.fetchDashBoard(id);\n    next();\n  }\n};\n</script>\n","import { render } from \"./RestaurantDashboard.vue?vue&type=template&id=d03fa40a\"\nimport script from \"./RestaurantDashboard.vue?vue&type=script&lang=js\"\nexport * from \"./RestaurantDashboard.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}